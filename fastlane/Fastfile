# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

#default_platform(:ios)

if ENV['CI']
  xcode_select "/Applications/Xcode_14.2.app"
end

# if ENV['FASTLANE_APPLE_APPLICATION_API_LOCATION'] == ""
# app_store_connect_api_key(
#     key_id: ENV['FASTLANE_APPLE_APPLICATION_API_KEY_ID'],
#     issuer_id: ENV['FASTLANE_APPLE_APPLICATION_API_ISSUER_ID'],
#     key_filepath: ENV['FASTLANE_APPLE_APPLICATION_API_LOCATION']
# )
# else
# app_store_connect_api_key(
#     key_id: ENV['FASTLANE_APPLE_APPLICATION_API_KEY_ID'],
#     issuer_id: ENV['FASTLANE_APPLE_APPLICATION_API_ISSUER_ID'],
#     key_content: ENV['FASTLANE_APPLE_APPLICATION_API_SECRET']
# )
# end

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :iosbeta do
    #sh("rm -r ~/Library/Developer/Xcode/DerivedData/*")
    #precheck
    getVersion = get_version_number(xcodeproj: "MeshPaper.xcodeproj", target: "MeshPaper")
    getBuild = get_build_number(xcodeproj: "MeshPaper.xcodeproj")
    build_ios_app(scheme: "MeshPaper", output_directory: "./Builds/#{getVersion}/#{getBuild}")
    upload_to_testflight(ipa: "./Builds/#{getVersion}/#{getBuild}/MeshPaper.ipa")
  end
end

platform :mac do
  desc "Push a new beta build to TestFlight"
  lane :macbeta do
    #sh("rm -r ~/Library/Developer/Xcode/DerivedData/*")
    #precheck
    getVersion = get_version_number(xcodeproj: "MeshPaper.xcodeproj", target: "MeshPaper")
    getBuild = get_build_number(xcodeproj: "MeshPaper.xcodeproj")
    build_mac_app(scheme: "MeshPaper", output_directory: "./Builds/#{getVersion}/#{getBuild}")
    upload_to_testflight(pkg: "./Builds/#{getVersion}/#{getBuild}/MeshPaper.pkg")
  end
end


desc "Upload both iOS and macOS beta builds"
lane :beta do
  # Bump Build Number
    getVersion = get_version_number(xcodeproj: "MeshPaper.xcodeproj", target: "MeshPaper")
    getOldBuild = get_build_number(xcodeproj: "MeshPaper.xcodeproj")
    increment_build_number(build_number: Integer(getOldBuild) + 1, xcodeproj: "MeshPaper.xcodeproj")
    getBuild = get_build_number(xcodeproj: "MeshPaper.xcodeproj")

    sh("git commit -a -m \"Bumped Build Number\"")
    latest_git_commit = sh("git rev-parse HEAD").strip

    sh("git tag -a \"v#{getVersion}(#{getBuild})\" -m \"\"")
    push_to_git_remote

    # Commit and push the build number change
    commit_message = "#{getVersion} (#{getBuild})"
    commit_description = "This is the beta release for #{getVersion} (#{getBuild})"

    # Get original branch
    original_branch = sh("git rev-parse --abbrev-ref HEAD").strip

    # Switch to beta branch
    sh("git checkout beta")
    sh("git pull origin beta")

    # Merge changes from main branch
    sh("git merge --squash -X theirs main")
    sh("git commit -a -m \"#{commit_message}\" -m \"#{commit_description}\"")

    # sh("sh ../scripts/beta-conflict-merging.sh")
    push_to_git_remote

    sh("git checkout \"#{original_branch}\"")
  # Run the macOS beta lane
  # Fastlane::LaneManager.cruise_lane("mac", "macbeta")
  
  # puts "-------------------------"
  # puts "Finnished uploading MacOS"
  # puts "-------------------------"
  
  # # Run the iOS beta lane
  # Fastlane::LaneManager.cruise_lane("ios", "iosbeta")
  
  # puts "-------------------------"
  # puts "Finnished uploading iOS"
  # puts "-------------------------"
  
    # notification(subtitle: "Finished Uploading", message: "Ready to test...", open: "https://appstoreconnect.apple.com/apps/6465843931/testflight/")
end
